{"version":3,"sources":["components/PassGenerator/PassGenerator.js","App.js","serviceWorker.js","index.js"],"names":["PassGenerator","state","mixed","special","length","randomPass","onLengthChangeHandler","e","value","target","setState","name","onCheckChangeHandler","randomPassGenerator","userLength","chars","finalString","concat","toUpperCase","randomPassArray","push","Math","floor","random","join","onClickHandler","preventDefault","randomPassVal","className","htmlFor","readOnly","type","id","this","onClick","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRA+GeA,G,kNA3GbC,MAAQ,CACNC,OAAO,EACPC,SAAS,EACTC,OAAQ,EACRC,WAAY,I,EAGdC,sBAAwB,SAACC,GACvB,IAAMC,EAAQD,EAAEE,OAAOD,MACvB,EAAKE,SAAL,eACGH,EAAEE,OAAOE,KAAOH,K,EAIrBI,qBAAuB,SAACL,GACtB,IAAMI,EAAOJ,EAAEE,OAAOE,KACtB,EAAKD,SAAL,eACGC,GAAQ,EAAKV,MAAMU,M,EAIxBE,oBAAsB,SAACC,EAAYZ,EAAOC,GACxC,IAAIY,EAAQ,6BAGRC,EAAc,GAGhBA,EADEd,GAASC,EACGa,EAAYC,OAAOF,EAAOA,EAAMG,cALlC,aACC,6BAKJf,EACKa,EAAYC,OAAOF,EAPrB,aACC,6BAOJb,EACKc,EAAYC,OAAOF,EAAOA,EAAMG,cATlC,cAUOF,EAAYC,OAAOF,EAV1B,cAgBd,IAJA,IAGII,EAAkB,GACfL,GACLK,EAAgBC,KAAKJ,EAJdK,KAAKC,MAAMD,KAAKE,SAAWP,EAAYZ,UAK9CU,IAEF,OAAOK,EAAgBK,KAAK,K,EAG9BC,eAAiB,SAAClB,GAChBA,EAAEmB,iBACF,IAAIC,EAAgB,EAAKd,oBACvB,EAAKZ,MAAMG,OACX,EAAKH,MAAMC,MACX,EAAKD,MAAME,SAEb,EAAKO,SAAS,CACZL,WAAYsB,K,uDAKd,OACE,0BAAMC,UAAU,kBACd,wBAAIA,UAAU,wBAAd,qBACA,yBAAKA,UAAU,yBACb,2BAAOC,QAAQ,gBAAf,UACA,2BAAOC,UAAQ,EAACC,KAAK,OAAOpB,KAAK,SAASqB,GAAG,SAASxB,MAAOyB,KAAKhC,MAAMI,aACxE,4BAAQ0B,KAAK,SAASH,UAAU,wBAAwBM,QAASD,KAAKR,gBAAtE,iBAKF,yBAAKG,UAAU,2BACb,uBAAGA,UAAU,gBAAb,YACA,2BAAOC,QAAQ,kBAAkBD,UAAU,gBAA3C,mBAGA,2BACEG,KAAK,SACLpB,KAAK,SACLqB,GAAG,kBACHG,SAAUF,KAAK3B,wBAEjB,2BAAOuB,QAAQ,iBAAiBD,UAAU,aACxC,2BACEG,KAAK,WACLpB,KAAK,QACLqB,GAAG,iBACHG,SAAUF,KAAKrB,uBALnB,iBAQE,0BAAMgB,UAAU,eAElB,2BAAOC,QAAQ,mBAAmBD,UAAU,aAC1C,2BACEG,KAAK,WACLpB,KAAK,UACLqB,GAAG,mBACHG,SAAUF,KAAKrB,uBALnB,yBAQE,0BAAMgB,UAAU,qB,GApGAQ,IAAMC,YCSnBC,MARf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,QCKcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d85c8cd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./PassGenerator.scss\";\n\nclass PassGenerator extends React.Component {\n  state = {\n    mixed: false,\n    special: false,\n    length: 0,\n    randomPass: \"\",\n  };\n\n  onLengthChangeHandler = (e) => {\n    const value = e.target.value;\n    this.setState({\n      [e.target.name]: value,\n    });\n  };\n\n  onCheckChangeHandler = (e) => {\n    const name = e.target.name;\n    this.setState({\n      [name]: !this.state[name],\n    });\n  };\n\n  randomPassGenerator = (userLength, mixed, special) => {\n    let chars = \"abcdefghijklmnopqrstuvwxyz\";\n    let numbers = \"0123456789\";\n    let specials = \"@%+/\\\\'!#$^?:,:(){}[]~-_.\";\n    let finalString = \"\";\n\n    if (mixed && special) {\n      finalString = finalString.concat(chars, chars.toUpperCase(), numbers, specials);\n    } else if (special) {\n      finalString = finalString.concat(chars, numbers, specials);\n    } else if (mixed) {\n      finalString = finalString.concat(chars, chars.toUpperCase(), numbers);\n    } else finalString = finalString.concat(chars, numbers);\n\n    const randomIndex = () => {\n      return Math.floor(Math.random() * finalString.length);\n    };\n    let randomPassArray = [];\n    while (userLength) {\n      randomPassArray.push(finalString[randomIndex()]);\n      userLength--;\n    }\n    return randomPassArray.join(\"\"); \n  };\n\n  onClickHandler = (e) => {\n    e.preventDefault();\n    let randomPassVal = this.randomPassGenerator(\n      this.state.length,\n      this.state.mixed,\n      this.state.special\n    );\n    this.setState({\n      randomPass: randomPassVal,\n    });\n  };\n\n  render() {\n    return (\n      <form className=\"pass-generator\">\n        <h1 className=\"pass-generator-title\">Generate Password</h1>\n        <div className=\"pass-generator-result\">\n          <label htmlFor=\"result label\">Result</label>\n          <input readOnly type=\"text\" name=\"result\" id=\"result\" value={this.state.randomPass} />\n          <button type=\"submit\" className=\"pass-generator-submit\" onClick={this.onClickHandler}>\n            NEW PASSWORD\n          </button>\n        </div>\n\n        <div className=\"pass-generator-settings\">\n          <p className=\"title-second\">Settings</p>\n          <label htmlFor=\"password-length\" className=\"length label\">\n            Password length\n          </label>\n          <input\n            type=\"number\"\n            name=\"length\"\n            id=\"password-length\"\n            onChange={this.onLengthChangeHandler}\n          />\n          <label htmlFor=\"password-mixed\" className=\"container\">\n            <input\n              type=\"checkbox\"\n              name=\"mixed\"\n              id=\"password-mixed\"\n              onChange={this.onCheckChangeHandler}\n            />\n            Use mixed case\n            <span className=\"checkmark\"></span>\n          </label>\n          <label htmlFor=\"password-special\" className=\"container\">\n            <input\n              type=\"checkbox\"\n              name=\"special\"\n              id=\"password-special\"\n              onChange={this.onCheckChangeHandler}\n            />\n            Use special Characters\n            <span className=\"checkmark\"></span>\n          </label>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default PassGenerator;\n","import React from \"react\";\nimport \"./App.scss\";\nimport PassGenerator from \"./components/PassGenerator/PassGenerator\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PassGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}